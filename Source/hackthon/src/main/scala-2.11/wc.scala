/**
  * Created by vilas on 3/3/2016.
  */

import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.hadoop.util
import org.apache.spark.sql.SQLContext

object wc5540 {
  def main(args: Array[String]) {
    System.setProperty("hadoop.home.dir", "C:\\Users\\vilas\\Downloads\\hadoop-common-2.2.0-bin-master")
    // initialise spark context
    val conf = new SparkConf().setAppName("WordCountSpark").setMaster("local[2]").set("spark.executor.memory", "10g")
    val sc = new SparkContext(conf)

    val sqlContext = new SQLContext(sc)


    val textFile = sqlContext.jsonFile("E:\\study\\twitdata\\output.strict")
    textFile.registerTempTable("data")
    textFile.printSchema();
    textFile.collect()

//brand wise stats
     val count9  =  sqlContext.sql("select distinct brand,count(*) As Counts from data where brand in ('Nikon','Canon','Sony','Olympus','Panasonic','Kodak','Samsung','Pentax') group by brand order by Counts desc limit 10")
    count9.show()
    count9.save("output9","json")
//top product with good sales rank
      val count10  =  sqlContext.sql("select asin,salesRank from data where categories like '%Digital SLR Cameras%' and salesRank is not null limit 10")
    count10.show()
  count10.save("output10","json")
//price based products
   val count11  =  sqlContext.sql("select price,asin from data where categories like '%Digital SLR Cameras%' and price is not null order by price desc limit 30 ")
    count11.show()
count11.save("output11","json")

val textFile2 = sqlContext.jsonFile("E:\\study\\twitdata\\output2.strict")
    textFile2.registerTempTable("data2")
    textFile2.printSchema();
    textFile2.collect()
//more no of reviwes
    val count12  =  sqlContext.sql("select distinct asin,count(*) from data2 where asin in ('B004J3V90Y','B004J3Y9U6','B00HQ4W1QE','B00BI9X7UC','B0040JHVCC','B00AXTQR5U','B00BW6LW7G','B009B0MZ8U','B00BW6LWO4','B003ZYF3LO','B00DMS0GTC','B00I9GYG8O','B00BW6LY2Y','B00FXYT12G','B00FOTF8M2','B007FGYZFI','B002NEGTU6','B00DMS0KAC','B00BW6LX20','B00CXWMOZW','B00BW6LXHA','B0040JHVC2','B0076AYNXM','B002NEGTTW','B00K0BYLN6','B006GDOHSQ','B0042X9LC4','B00HQ4W2RW','B009OAOG9S','B00AXTQQDS','B0035FZJI0','B001G5ZTLS','B005LW580O','B005J4Y422','B00AXTQRAA','B00BF9MVMK','B00B2A1KEC','B001XURPQS','B00HYHBE3E','B00IB1BTWI','B001CBKJGG','B001CBMD6A','B007FGZ1V0','B00894YWD0','B00IDHTOZY','B00FXYT9DC','B00I7VBEOU','B00HQ4W326','B000VJX7DW','B00FXYTCVG','B0012YA85A','B005OL2ID2','B001AO4JRK','B001ENOZY4','B00C9EGQJE','B0012Y88QQ','B001EQ4BVI','B000051TOG','B000I1ZWRC','B001G5ZTMM','B00CI3R71W','B00K1H0D22','B00FKLQ0LW','B00DQXJM6Q','B00267S7TQ','B00E879EPI','B005IHAICK','B00ICTT1FG','B001XURPQI','B00FA5H62U','B00BD2Y9L0','B00CIBRAKM','B00FW3H0GC','B00BNF0XMG','B00BPEM9AO','B00GGM9F20','B00FL5DDCG','B00I508T5U','B00I5093UK') group by asin  limit 5")
    count12.show()
   count12.save("output12","json")

 overall group
    val count13  =  sqlContext.sql("select distinct overall,count(*) as counts from data2 where asin in ('B004J3V90Y','B004J3Y9U6','B00HQ4W1QE','B00BI9X7UC','B0040JHVCC','B00AXTQR5U','B00BW6LW7G','B009B0MZ8U','B00BW6LWO4','B003ZYF3LO','B00DMS0GTC','B00I9GYG8O','B00BW6LY2Y','B00FXYT12G','B00FOTF8M2','B007FGYZFI','B002NEGTU6','B00DMS0KAC','B00BW6LX20','B00CXWMOZW','B00BW6LXHA','B0040JHVC2','B0076AYNXM','B002NEGTTW','B00K0BYLN6','B006GDOHSQ','B0042X9LC4','B00HQ4W2RW','B009OAOG9S','B00AXTQQDS','B0035FZJI0','B001G5ZTLS','B005LW580O','B005J4Y422','B00AXTQRAA','B00BF9MVMK','B00B2A1KEC','B001XURPQS','B00HYHBE3E','B00IB1BTWI','B001CBKJGG','B001CBMD6A','B007FGZ1V0','B00894YWD0','B00IDHTOZY','B00FXYT9DC','B00I7VBEOU','B00HQ4W326','B000VJX7DW','B00FXYTCVG','B0012YA85A','B005OL2ID2','B001AO4JRK','B001ENOZY4','B00C9EGQJE','B0012Y88QQ','B001EQ4BVI','B000051TOG','B000I1ZWRC','B001G5ZTMM','B00CI3R71W','B00K1H0D22','B00FKLQ0LW','B00DQXJM6Q','B00267S7TQ','B00E879EPI','B005IHAICK','B00ICTT1FG','B001XURPQI','B00FA5H62U','B00BD2Y9L0','B00CIBRAKM','B00FW3H0GC','B00BNF0XMG','B00BPEM9AO','B00GGM9F20','B00FL5DDCG','B00I508T5U','B00I5093UK')  group by overall order by overall limit 10")
    count13.show()
    count13.save("output13","json")

//5.0 rated product with more number
val count14  =  sqlContext.sql("select distinct asin,count(*) as counts from data2 where asin in ('B004J3V90Y','B004J3Y9U6','B00HQ4W1QE','B00BI9X7UC','B0040JHVCC','B00AXTQR5U','B00BW6LW7G','B009B0MZ8U','B00BW6LWO4','B003ZYF3LO','B00DMS0GTC','B00I9GYG8O','B00BW6LY2Y','B00FXYT12G','B00FOTF8M2','B007FGYZFI','B002NEGTU6','B00DMS0KAC','B00BW6LX20','B00CXWMOZW','B00BW6LXHA','B0040JHVC2','B0076AYNXM','B002NEGTTW','B00K0BYLN6','B006GDOHSQ','B0042X9LC4','B00HQ4W2RW','B009OAOG9S','B00AXTQQDS','B0035FZJI0','B001G5ZTLS','B005LW580O','B005J4Y422','B00AXTQRAA','B00BF9MVMK','B00B2A1KEC','B001XURPQS','B00HYHBE3E','B00IB1BTWI','B001CBKJGG','B001CBMD6A','B007FGZ1V0','B00894YWD0','B00IDHTOZY','B00FXYT9DC','B00I7VBEOU','B00HQ4W326','B000VJX7DW','B00FXYTCVG','B0012YA85A','B005OL2ID2','B001AO4JRK','B001ENOZY4','B00C9EGQJE','B0012Y88QQ','B001EQ4BVI','B000051TOG','B000I1ZWRC','B001G5ZTMM','B00CI3R71W','B00K1H0D22','B00FKLQ0LW','B00DQXJM6Q','B00267S7TQ','B00E879EPI','B005IHAICK','B00ICTT1FG','B001XURPQI','B00FA5H62U','B00BD2Y9L0','B00CIBRAKM','B00FW3H0GC','B00BNF0XMG','B00BPEM9AO','B00GGM9F20','B00FL5DDCG','B00I508T5U','B00I5093UK') and overall='5.0' group by asin order by counts limit 10")
    count14.show()
count14.save("output14","json")

//reviews by date
    val count15  =  sqlContext.sql("select distinct substr(reviewTime,7,11) as year,count(*) as counts from data2 where asin in ('B004J3V90Y','B004J3Y9U6','B00HQ4W1QE','B00BI9X7UC','B0040JHVCC','B00AXTQR5U','B00BW6LW7G','B009B0MZ8U','B00BW6LWO4','B003ZYF3LO','B00DMS0GTC','B00I9GYG8O','B00BW6LY2Y','B00FXYT12G','B00FOTF8M2','B007FGYZFI','B002NEGTU6','B00DMS0KAC','B00BW6LX20','B00CXWMOZW','B00BW6LXHA','B0040JHVC2','B0076AYNXM','B002NEGTTW','B00K0BYLN6','B006GDOHSQ','B0042X9LC4','B00HQ4W2RW','B009OAOG9S','B00AXTQQDS','B0035FZJI0','B001G5ZTLS','B005LW580O','B005J4Y422','B00AXTQRAA','B00BF9MVMK','B00B2A1KEC','B001XURPQS','B00HYHBE3E','B00IB1BTWI','B001CBKJGG','B001CBMD6A','B007FGZ1V0','B00894YWD0','B00IDHTOZY','B00FXYT9DC','B00I7VBEOU','B00HQ4W326','B000VJX7DW','B00FXYTCVG','B0012YA85A','B005OL2ID2','B001AO4JRK','B001ENOZY4','B00C9EGQJE','B0012Y88QQ','B001EQ4BVI','B000051TOG','B000I1ZWRC','B001G5ZTMM','B00CI3R71W','B00K1H0D22','B00FKLQ0LW','B00DQXJM6Q','B00267S7TQ','B00E879EPI','B005IHAICK','B00ICTT1FG','B001XURPQI','B00FA5H62U','B00BD2Y9L0','B00CIBRAKM','B00FW3H0GC','B00BNF0XMG','B00BPEM9AO','B00GGM9F20','B00FL5DDCG','B00I508T5U','B00I5093UK') group by substr(reviewTime,7,11) order by year limit 1000")
    count15.show()
    count15.save("output15","json")

//positive reviewed product
    val count16  =  sqlContext.sql("select distinct asin,count(*) as counts from data2 where asin in ('B004J3V90Y','B004J3Y9U6','B00HQ4W1QE','B00BI9X7UC','B0040JHVCC','B00AXTQR5U','B00BW6LW7G','B009B0MZ8U','B00BW6LWO4','B003ZYF3LO','B00DMS0GTC','B00I9GYG8O','B00BW6LY2Y','B00FXYT12G','B00FOTF8M2','B007FGYZFI','B002NEGTU6','B00DMS0KAC','B00BW6LX20','B00CXWMOZW','B00BW6LXHA','B0040JHVC2','B0076AYNXM','B002NEGTTW','B00K0BYLN6','B006GDOHSQ','B0042X9LC4','B00HQ4W2RW','B009OAOG9S','B00AXTQQDS','B0035FZJI0','B001G5ZTLS','B005LW580O','B005J4Y422','B00AXTQRAA','B00BF9MVMK','B00B2A1KEC','B001XURPQS','B00HYHBE3E','B00IB1BTWI','B001CBKJGG','B001CBMD6A','B007FGZ1V0','B00894YWD0','B00IDHTOZY','B00FXYT9DC','B00I7VBEOU','B00HQ4W326','B000VJX7DW','B00FXYTCVG','B0012YA85A','B005OL2ID2','B001AO4JRK','B001ENOZY4','B00C9EGQJE','B0012Y88QQ','B001EQ4BVI','B000051TOG','B000I1ZWRC','B001G5ZTMM','B00CI3R71W','B00K1H0D22','B00FKLQ0LW','B00DQXJM6Q','B00267S7TQ','B00E879EPI','B005IHAICK','B00ICTT1FG','B001XURPQI','B00FA5H62U','B00BD2Y9L0','B00CIBRAKM','B00FW3H0GC','B00BNF0XMG','B00BPEM9AO','B00GGM9F20','B00FL5DDCG','B00I508T5U','B00I5093UK') and overall='5.0' and  summary like '%Great%' or summary like '%love%' group by asin order by counts desc limit 10")
    count16.show()
count16.save("output16","json")
//negative reviwes
val count17  =  sqlContext.sql("select distinct asin,count(*) as counts from data2 where asin in ('B004J3V90Y','B004J3Y9U6','B00HQ4W1QE','B00BI9X7UC','B0040JHVCC','B00AXTQR5U','B00BW6LW7G','B009B0MZ8U','B00BW6LWO4','B003ZYF3LO','B00DMS0GTC','B00I9GYG8O','B00BW6LY2Y','B00FXYT12G','B00FOTF8M2','B007FGYZFI','B002NEGTU6','B00DMS0KAC','B00BW6LX20','B00CXWMOZW','B00BW6LXHA','B0040JHVC2','B0076AYNXM','B002NEGTTW','B00K0BYLN6','B006GDOHSQ','B0042X9LC4','B00HQ4W2RW','B009OAOG9S','B00AXTQQDS','B0035FZJI0','B001G5ZTLS','B005LW580O','B005J4Y422','B00AXTQRAA','B00BF9MVMK','B00B2A1KEC','B001XURPQS','B00HYHBE3E','B00IB1BTWI','B001CBKJGG','B001CBMD6A','B007FGZ1V0','B00894YWD0','B00IDHTOZY','B00FXYT9DC','B00I7VBEOU','B00HQ4W326','B000VJX7DW','B00FXYTCVG','B0012YA85A','B005OL2ID2','B001AO4JRK','B001ENOZY4','B00C9EGQJE','B0012Y88QQ','B001EQ4BVI','B000051TOG','B000I1ZWRC','B001G5ZTMM','B00CI3R71W','B00K1H0D22','B00FKLQ0LW','B00DQXJM6Q','B00267S7TQ','B00E879EPI','B005IHAICK','B00ICTT1FG','B001XURPQI','B00FA5H62U','B00BD2Y9L0','B00CIBRAKM','B00FW3H0GC','B00BNF0XMG','B00BPEM9AO','B00GGM9F20','B00FL5DDCG','B00I508T5U','B00I5093UK') and  summary like '%Bad%' or summary like '%bad%' or summary like '%worst%' group by asin order by counts desc limit 10")
count17.show()
count17.save("output17","json")

  }
}
